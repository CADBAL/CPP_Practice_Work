{    
    "version": "2.0.0",
    "tasks": [
            {
    // Below is for when you want to debug a a project within a folder using a makefile
      "label": "make build (current folder)",
      "type": "shell",
      "command": "make",
      "args": ["MAIN=${fileBasenameNoExtension}"],
      "options": { "cwd": "${fileDirname}" },
      "problemMatcher": "$gcc",
      "group": { "kind": "build", "isDefault": true },
      "detail": "Runs Makefile in the active file's folder (MAIN set to the active filename)"
     },
     // Below is for when you want to 'make clean' in the current folder
     {
      "label": "make clean (current folder)",
      "type": "shell",
      "command": "make",
      "args": ["clean"],
      "options": { "cwd": "${fileDirname}" },
      "problemMatcher": []
    },
        // Below is for when you want to debug only a single file which doesn't utilize a makefile
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe build active file (WSL)", //The label value is what you will see in the 
            //tasks list; you can name this whatever you like.

            "command": "/usr/bin/g++", // For Windows: use "C:\\msys64\\ucrt64\\bin\\g++.exe" instead of "/usr/bin/g++"
            "args": [
                "-fdiagnostics-color=always",
                
                "-std=c++23", //Sets the C++ language standard to C++23, 
                // meaning that the compiler will expect your code to adhere to the C++23 standard.

                "-O0",
                "-g",

                "-ggdb", // This is used for debugging build
                // ggdb: Generates additional debug information compatible with the GDB debugger.

                //"-O2", // This is used for release build
                // Sets the optimization level to 2, 
                // which enables most optimizations without increasing the compilation time significantly.

                //"-DNDEBUG", // This is used for release build as well
                //  Defines the NDEBUG macro, which typically disables assertions in your code.

                "-pedantic-errors", // Used to disable compiler extensions that are incompatible with 
                // c++ standard. Treats certain types of non-standard language extensions and 
                // certain kinds of syntax as errors, instead of warnings.

                // The below five arguments allow VS CODE to generate extra warnings
                "-Wall",
                // Enables most warning messages. 
                // This flag enables a wide range of warnings about questionable code constructs.

                "-Weffc++",
                // Weffc++: Warns about violations of the style guidelines from Scott Meyers' 
                // Effective C++ book.

                "-Wextra",
                // -Wextra: Enables some extra warning messages that are not enabled by -Wall. 

                "-Wconversion",
                // -Wconversion: Warns about implicit conversions that may change a value.

                "-Wsign-conversion",
                //  -Wsign-conversion: Warns about implicit conversions that may change a value.

                // END OF THE FIVE ARGUMENTS

                "-Werror", // Treats all warnings as errors, so any warning will cause the compilation 
                // to fail. Prevents myself from ignoring warnings and actually address them

                "${file}", // Represents the current file being compiled.

                "-o", // Specifies the output file for the compiled executable.

                "${fileDirname}/${fileBasenameNoExtension}" // For Windows: add ".exe" and use backslashes like "\\"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [ // selects the output parser to use for finding errors and warnings in the 
            // compiler output
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Builds only the active .cpp with strict warnings and debug symbols"
            // The detail value is what you will see as the 
            // description of the task in the tasks list. 
            // It's highly recommended to rename this value to differentiate it from similar tasks.
        }
    ],
}
